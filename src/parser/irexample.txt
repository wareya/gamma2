// core types: u8, i8, u16, i16, u32, i32, u64, i64, f32, f64
// pointer types: ptr(type), funcptr(returntype, (arg1type, arg2type, ...))
// composite types: structs, array(type, len)

struct Vec2
{
    f32 x;
    f32 y;
}


f32 plus_one(f32 a)
{
    return a + 1.0f32;
}

funcptr(f32, (f32)) r_add_one()
{
    return plus_one;
}

f32 add(f32 a, f32 b)
{
    //Vec2 vec;
    //vec.x = a;
    //vec.y = b;
    //a = vec.x + vec.y - 1.0f32;
    f32 z;
    
    z = b;
    
    array(f32, 2) list;
    list[0i64] = a;
    *(&(list[1i64])) = b;
    
    return r_add_one()(list[0i64] + list[1i64]);
    //return r_add_one()(a + b);
}


f32 tenloop()
{
    f32 x;
    x = 0.0f32;
    
loop_head:
    x = x + 1.061f32;
    
    if(x < 10.0f32)
        goto loop_head;
    
    return x;
}
