// core types: u8, i8, u16, i16, u32, i32, u64, i64, f32, f64
// pointer types: ptr(type), funcptr(returntype, (arg1type, arg2type, ...))
// composite types: structs, array(type, len)

/*

struct Vec2
{
    f32 x;
    f32 y;
}


f32 plus_one(f32 a)
{
    return a + 1.0f32;
}

funcptr(f32, (f32)) r_add_one()
{
    return plus_one;
}

f32 add(f32 a, f32 b)
{
    Vec2 vec;
    vec.x = a;
    vec.y = b;
    a = vec.x + vec.y - 1.0f32;
    
    array(f32, 2) list;
    list[0i64] = a;
    *(&(list[1i64])) = b;
    
    f32 asdf = r_add_one()(list[0i64] + list[1i64]);
    return r_add_one()(a + b);
}


f32 tenloop()
{
    f32 x;
    x = 0.0f32;
    
loop_head:
    x = x + 1.061f32;
    
    if(x < 10.0f32)
        goto loop_head;
    
    return x;
}

*/

f32 func_gravity()
{
    u64 i = 0u64;
    f64 yvel = 0.0f64;
    f64 y = 0.0f64;
    const f64 gravity = 9.8f64;
    const f64 delta = 0.001f64;
    
head:
    yvel = yvel + delta*gravity*0.5f64;
    y = y + yvel*delta;
    yvel = yvel + delta*gravity*0.5f64;
    
    i = i + 1u64;
    
    if (i < 5000000u64)
        goto head;
    
    return (y as f32);
}

void returns_void(f32 a)
{
    a = a;
    return;
}

void void_ptr_arg(ptr(void) a)
{
    return;
}

void array_literal()
{
    array(u8, 10) funtime = [16u8, 201u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8];
    print_bytes((funtime bit_as ptr(u8)), 10u64);
    funtime = [61u8, 1u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 42u8];
    print_bytes((funtime bit_as ptr(u8)), 10u64);
    return;
}

void print_garbage()
{
    array(u8, 16) garbage;
    
    garbage[ 0i64] = 16u8;
    garbage[ 1i64] = 1u8;
    garbage[ 2i64] = 175u8;
    garbage[ 3i64] = 15u8;
    garbage[ 4i64] = 115u8;
    garbage[ 5i64] = 255u8;
    garbage[ 6i64] = 94u8;
    garbage[ 7i64] = 114u8;
    garbage[ 8i64] = 62u8;
    garbage[ 9i64] = 0u8;
    garbage[10i64] = 183u8;
    garbage[11i64] = 123u8;
    garbage[12i64] = 86u8;
    garbage[13i64] = 63u8;
    garbage[14i64] = 85u8;
    garbage[15i64] = 1u8;
    
    print_bytes((garbage bit_as ptr(u8)), 16u64);
    
    u8 a;
    i32 r;
    
    a = 16u8;
    r = intrinsic_memcmp(&a, &garbage[0i64], 1u64);
    print_bytes((&r bit_as ptr(u8)), 4u64);
    
    a = 17u8;
    r = intrinsic_memcmp(&a, &garbage[0i64], 1u64);
    print_bytes((&r bit_as ptr(u8)), 4u64);
    
    a = 15u8;
    r = intrinsic_memcmp(&a, &garbage[0i64], 1u64);
    print_bytes((&r bit_as ptr(u8)), 4u64);
    
    return;
}